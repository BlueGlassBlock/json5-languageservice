
import { getLanguageService, ClientCapabilities, TextDocument, SortOptions } from '../jsonLanguageService';
import * as assert from 'assert';

suite('Sort JSON', () => {

    const ls = getLanguageService({ clientCapabilities: ClientCapabilities.LATEST });
    let formattingOptions = { tabSize: 2, insertSpaces: true, keepLines: false, eol: '\n', insertFinalNewline: false };

    function testSort(unsorted: string, expected: string, options: SortOptions) {
        let document = TextDocument.create('test://test.json', 'json', 0, unsorted);
        const edits = ls.sort(document, options);
        const sorted = TextDocument.applyEdits(document, edits);
        assert.equal(sorted, expected);
    }

    test('sorting a simple JSONC object with numeric values', () => {
        const content = [
            '{"b" : 1, "a" : 2}'
        ].join('\n');

        const expected = [
            '{\n  "a": 2,\n  "b": 1\n}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a simple JSONC object with an array spanning several lines', () => {
        const content = [
            '{"array":["volleyball",',
            '      "drawing",',
            '  "hiking"]}'
        ].join('\n');

        const expected = [
            '{',
            '  "array": [',
            '    "volleyball",',
            '    "drawing",',
            '    "hiking"',
            '  ]',
            '}'

        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with nested objects', () => {
        const content = [
            '{"name": "Brigitte","age" : 30,',
            '"hobbies" : ["volleyball","drawing","hiking"],',
            '"friends" : {',
            '"Marc" : {"hobbies" : ["kayaking", "mountaineering"],',
            '"age" : 35},',
            '"Leila" : {"hobbies" : ["watching movies",',
            '"reading books"], "age" : 32}}}'
        ].join('\n');

        const expected = [
            '{',
            '  "age": 30,',
            '  "friends": {',
            '    "Leila": {',
            '      "age": 32,',
            '      "hobbies": [',
            '        "watching movies",',
            '        "reading books"',
            '      ]',
            '    },',
            '    "Marc": {',
            '      "age": 35,',
            '      "hobbies": [',
            '        "kayaking",',
            '        "mountaineering"',
            '      ]',
            '    }',
            '  },',
            '  "hobbies": [',
            '    "volleyball",',
            '    "drawing",',
            '    "hiking"',
            '  ],',
            '  "name": "Brigitte"',
            '}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with line comments', () => {
        const content = [
            '{ // this is a comment',
            '"boolean" : true,',
            '"array" : [',
            '// this is a second comment',
            ' "element1", "element2"]',
            '}'

        ].join('\n');

        const expected = [
            '{ // this is a comment',
            '  "array": [',
            '    // this is a second comment',
            '    "element1",',
            '    "element2"',
            '  ],',
            '  "boolean": true',
            '}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with an object nested inside of an array value', () => {
        const content = [
            '{',
            '"boolean" : true,',
            '"array" : [',
            ' "element1", {"property" : "element2"}, "element3"]',
            '}'
        ].join('\n');

        const expected = [
            '{',
            '  "array": [',
            '    "element1",',
            '    {',
            '      "property": "element2"',
            '    },',
            '    "element3"',
            '  ],',
            '  "boolean": true',
            '}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with comments appearing before and after the main JSON object', () => {
        const content = [
            '// comment appearing before',
            '',
            '{',
            '"boolean" : true,',
            '"array" : [',
            ' "element1", {"property" : "element2"}, "element3"]',
            '} /* block comment appearing ',
            'after, it spans several',
            'lines */'
        ].join('\n');

        const expected = [
            '// comment appearing before',
            '{',
            '  "array": [',
            '    "element1",',
            '    {',
            '      "property": "element2"',
            '    },',
            '    "element3"',
            '  ],',
            '  "boolean": true',
            '} /* block comment appearing ',
            'after, it spans several',
            'lines */'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with new lines appearing before and after the main JSON object', () => {
        const content = [
            '',
            '',
            '{',
            '"boolean" : true,',
            '"array" : [',
            ' "element1", {"property" : "element2"}, "element3"]',
            '}',
            '',
            ''
        ].join('\n');

        const expected = [
            '{',
            '  "array": [',
            '    "element1",',
            '    {',
            '      "property": "element2"',
            '    },',
            '    "element3"',
            '  ],',
            '  "boolean": true',
            '}',
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with a block comment appearing on the same line as a comma but not ending on that line', () => {
        const content = [
            '{',
            '"boolean" : true, /* this is block comment starting on',
            'the line where the comma is but ending on another line */',
            '"array" : []',
            '}',
        ].join('\n');

        const expected = [
            '{',
            '  "array": [],',
            '  "boolean": true /* this is block comment starting on',
            'the line where the comma is but ending on another line */',
            '}',
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with a block comment starting at the end of a property and such that a new property starts on the end of that block comment', () => {
        const content = [
            '{',
            '"boolean" : true, /* this is block comment starting on',
            'the line where the comma is but ending on another line */ "array" : []',
            '}',
        ].join('\n');

        const expected = [
            '{',
            '  "array": [],',
            '  "boolean": true /* this is block comment starting on',
            'the line where the comma is but ending on another line */',
            '}',
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with comments between properties', () => {
        const content = [
            '// comment appearing before',
            '',
            '{',
            ' // some comment',
            '"boolean" : true,',
            ' // some other comment',
            '"numeric" : 2,',
            ' /* a third comment',
            ' which is a block comment */',
            '"array": []',
            '}'
        ].join('\n');

        const expected = [
            '// comment appearing before',
            '{',
            '  /* a third comment',
            ' which is a block comment */',
            '  "array": [],',
            '  // some comment',
            '  "boolean": true,',
            '  // some other comment',
            '  "numeric": 2',
            '}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with comments appearing between a value and the comma', () => {
        const content = [
            '{',
            '"boolean" : true // some comment',
            ',',
            '"array" : [],',
            '"numeric" : 2',
            '}'
        ].join('\n');

        const expected = [
            '{',
            '  "array": [],',
            '  "boolean": true // some comment',
            '  ,',
            '  "numeric": 2',
            '}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object with block comments on the same line as the arrays', () => {
        const content = [
            '/* multi-line comment',
            '..',
            '*/',
            '{ /* multi-line comment',
            '..',
            '*/ ',
            '"information_for_contributors": [',
            '/* multi-line comment',
            '..',
            '*/',
            '"This file has been converted from https://github.com/textmate/perl.tmbundle/blob/master/Syntaxes/Perl%206.tmLanguage",',
            '"Once accepted there, we are happy to receive an update request."',
            '], /* multi-line comment',
            '..',
            '*/',
            '"version": "https://github.com/textmate/perl.tmbundle/commit/d9841a0878239fa43f88c640f8d458590f97e8f5", /* multi-line comment',
            '..',
            '*/',
            '"name": "Perl 6" /* multi-line comment',
            '..',
            '*/',
            '}'
        ].join('\n');

        const expected = [
            '/* multi-line comment',
            '..',
            '*/',
            '{ /* multi-line comment',
            '..',
            '*/',
            '  "information_for_contributors": [',
            '    /* multi-line comment',
            '..',
            '*/',
            '    "This file has been converted from https://github.com/textmate/perl.tmbundle/blob/master/Syntaxes/Perl%206.tmLanguage",',
            '    "Once accepted there, we are happy to receive an update request."',
            '  ], /* multi-line comment',
            '..',
            '*/',
            '  "name": "Perl 6", /* multi-line comment',
            '..',
            '*/',
            '  "version": "https://github.com/textmate/perl.tmbundle/commit/d9841a0878239fa43f88c640f8d458590f97e8f5" /* multi-line comment',
            '..',
            '*/',
            '}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a JSONC object where the colon is not on the same line as the key or the value', () => {
        const content = [
            '{',
            '"boolean"',
            ':',
            'true // some comment',
            ',',
            '"array"',
            ': [],',
            '"numeric" : 2',
            '}'
        ].join('\n');

        const expected = [
            '{',
            '  "array": [],',
            '  "boolean": true // some comment',
            '  ,',
            '  "numeric": 2',
            '}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a complicated JSONC object 1', () => {
        const content = [
            '// Comment ouside the main JSON object',
            '',
            '{',
            '// A comment which belongs to b',
            '"b": "some value",',
            '',
            '"a": "some other value" /* a block comment which starts on the same line as key a',
            '..*/,',
            '',
            '"array": [',
            '"first element",',
            '{',
            '    // comment belonging to r',
            '    "r" : 1,',
            '',
            '    // comment belonging to q',
            '    "q" : {',
            '        "s" : 2',
            '    },',
            '    // comment belonging to p',
            '    "p" : 3',
            '},',
            '"third element"',
            '] // some comment on the line where the array ends',
            ',',
            '',
            '"numeric" : [ 1, 2, 3]',
            '}',
            '',
            '',
            '/* Comment below the main JSON object',
            '...',
            '...',
            '*/'
        ].join('\n');

        const expected = [
            '// Comment ouside the main JSON object',
            '{',
            '  "a": "some other value" /* a block comment which starts on the same line as key a',
            '..*/,',
            '  "array": [',
            '    "first element",',
            '    {',
            '      // comment belonging to p',
            '      "p": 3,',
            '      // comment belonging to q',
            '      "q": {',
            '        "s": 2',
            '      },',
            '      // comment belonging to r',
            '      "r": 1',
            '    },',
            '    "third element"',
            '  ] // some comment on the line where the array ends',
            '  ,',
            '  // A comment which belongs to b',
            '  "b": "some value",',
            '  "numeric": [',
            '    1,',
            '    2,',
            '    3',
            '  ]',
            '}',
            '/* Comment below the main JSON object',
            '...',
            '...',
            '*/'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a complicated JSONC object 2', () => {
        const content = [
            '/*',
            '',
            'adding some comment before the actual JSON file',
            '',
            '*/ {',
            '    "webviewContentExternalBaseUrlTemplate": "https://{{uuid}}.vscode-cdn.net/insider/ef65ac1ba57f57f2a3961bfe94aa20481caca4c6/out/vs/workbench/contrib/webview/browser/pre/",',
            '    // some other comment',
            '    "builtInExtensions": [',
            '        {',
            '            "name": "ms-vscode.js-debug-companion", /** adding some more comments **/',
            '            "version": "1.0.18",',
            '            "repo": "https://github.com/microsoft/vscode-js-debug-companion",',
            '            "metadata": {',
            '                "id": "99cb0b7f-7354-4278-b8da-6cc79972169d",',
            '                "publisherId": {',
            '                    "publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",',
            '                    "publisherName": "ms-vscode" // comment',
            '                    ,',
            '                    "displayName": "Microsoft",',
            '                    "flags": "verified"',
            '                },',
            '                "publisherDisplayName": "Microsoft"',
            '            }',
            '        },',
            '        {',
            '            "name": "ms-vscode.js-debug", /** adding some more comments',
            '            ...',
            '            ...',
            '            */ "version": "1.75.1",',
            '            "repo": "https://github.com/microsoft/vscode-js-debug",',
            '            "metadata": {',
            '                "id": "25629058-ddac-4e17-abba-74678e126c5d",',
            '                "publisherId": {',
            '                    "publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",',
            '                    "publisherName": "ms-vscode",',
            '                    "displayName": "Microsoft",',
            '                    "flags": "verified"',
            '                },',
            '                "publisherDisplayName": "Microsoft"',
            '            }',
            '           // some more comments at the end after all properties',
            '        },',
            '        {',
            '            "name": "ms-vscode.vscode-js-profile-table",',
            '            "version": "1.0.3",',
            '            "repo": "https://github.com/microsoft/vscode-js-profile-visualizer",',
            '            "metadata": {',
            '                "id": "7e52b41b-71ad-457b-ab7e-0620f1fc4feb",',
            '                "publisherId": {',
            '                    "publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",',
            '                    "publisherName": "ms-vscode",',
            '                    "displayName": "Microsoft",',
            '                    "flags": "verified"',
            '                },',
            '                "publisherDisplayName": "Microsoft"',
            '            }',
            '        } ',
            '    ] // comment on the end of an array',
            '}',
        ].join('\n');

        const expected = [
            '/*',
            '',
            'adding some comment before the actual JSON file',
            '',
            '*/ {',
            '  // some other comment',
            '  "builtInExtensions": [',
            '    {',
            '      "metadata": {',
            '        "id": "99cb0b7f-7354-4278-b8da-6cc79972169d",',
            '        "publisherDisplayName": "Microsoft",',
            '        "publisherId": {',
            '          "displayName": "Microsoft",',
            '          "flags": "verified",',
            '          "publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",',
            '          "publisherName": "ms-vscode" // comment',
            '        }',
            '      },',
            '      "name": "ms-vscode.js-debug-companion", /** adding some more comments **/',
            '      "repo": "https://github.com/microsoft/vscode-js-debug-companion",',
            '      "version": "1.0.18"',
            '    },',
            '    {',
            '      "metadata": {',
            '        "id": "25629058-ddac-4e17-abba-74678e126c5d",',
            '        "publisherDisplayName": "Microsoft",',
            '        "publisherId": {',
            '          "displayName": "Microsoft",',
            '          "flags": "verified",',
            '          "publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",',
            '          "publisherName": "ms-vscode"',
            '        }',
            '      },',
            '      // some more comments at the end after all properties',
            '      "name": "ms-vscode.js-debug", /** adding some more comments',
            '            ...',
            '            ...',
            '            */',
            '      "repo": "https://github.com/microsoft/vscode-js-debug",',
            '      "version": "1.75.1"',
            '    },',
            '    {',
            '      "metadata": {',
            '        "id": "7e52b41b-71ad-457b-ab7e-0620f1fc4feb",',
            '        "publisherDisplayName": "Microsoft",',
            '        "publisherId": {',
            '          "displayName": "Microsoft",',
            '          "flags": "verified",',
            '          "publisherId": "5f5636e7-69ed-4afe-b5d6-8d231fb3d3ee",',
            '          "publisherName": "ms-vscode"',
            '        }',
            '      },',
            '      "name": "ms-vscode.vscode-js-profile-table",',
            '      "repo": "https://github.com/microsoft/vscode-js-profile-visualizer",',
            '      "version": "1.0.3"',
            '    }',
            '  ], // comment on the end of an array',
            '  "webviewContentExternalBaseUrlTemplate": "https://{{uuid}}.vscode-cdn.net/insider/ef65ac1ba57f57f2a3961bfe94aa20481caca4c6/out/vs/workbench/contrib/webview/browser/pre/"',
            '}',
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a deeply nested JSONC object', () => {
        const content = [
            '{',
            '    "a" : {',
            '        "y" : {},',
            '        "a" : {}',
            '    }, // comment',
            '',
            '   "b" : [',
            '        [',
            '            { /* some comment',
            '            */',
            '                "b" : {',
            '                    "y" : [],',
            '                    "x" : []',
            '                },',
            '                "a" : {',
            '                    "z" : [],',
            '                    "m" : [],',
            '                    "b" : {',
            '                        "b" : 1,',
            '                        "a" : 2',
            '                    }',
            '                },',
            '                "c" : {',
            '                    "a" : {',
            '                        "b" : 1',
            '                    }',
            '                   // comment at the end',
            '                }',
            '            }',
            '        ]',
            '    ]',
            '}'
        ].join('\n');

        const expected = [
            '{',
            '  "a": {',
            '    "a": {},',
            '    "y": {}',
            '  }, // comment',
            '  "b": [',
            '    [',
            '      { /* some comment',
            '            */',
            '        "a": {',
            '          "b": {',
            '            "a": 2,',
            '            "b": 1',
            '          },',
            '          "m": [],',
            '          "z": []',
            '        },',
            '        "b": {',
            '          "x": [],',
            '          "y": []',
            '        },',
            '        "c": {',
            '          "a": {',
            '            "b": 1',
            '          }',
            '          // comment at the end',
            '        }',
            '      }',
            '    ]',
            '  ]',
            '}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a simple JSONC document where the outer container is an array', () => {
        const content = [
            '[',
            '    {',
            '        "hi": 1',
            '    },',
            '',
            '    // some comment',
            '',
            '    {',
            '        "b" : 2,',
            '        "a" : 1',
            '    }',
            ']'
        ].join('\n');

        const expected = [
            '[',
            '  {',
            '    "hi": 1',
            '  },',
            '  // some comment',
            '  {',
            '    "a": 1,',
            '    "b": 2',
            '  }',
            ']'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a complicated JSONC object 3', () => {
        const content = [
            '{',
            '    "type": "array",',
            '    "items": {',
            '        /* multi-line comment',
            '        ..',
            '        */',
            '        "oneOf": [ /* multi-line comment',
            '                ..',
            '                */',
            '            {',
            '                "type": "object",',
            '                "required": [ /* multi-line comment',
            '                            ..',
            '                            */',
            '                    "name",',
            '                    "prependLicenseText"',
            '                   /* multi-line comment',
            '                    ..',
            '                    */,',
            '                    {',
            '                        "name" : "some property", /* multi-line comment',
            '                        ..',
            '                        */',
            '                        "value" : "some value" // some value',
            '                        /* multi-line comment',
            '                        ..',
            '                        */',
            '                    }',
            '                ],',
            '                // one-line comment',
            '                "properties": { // one-line comment',
            '                    "name": {',
            '                        "type": "string",',
            '                        "description": "The name of the dependency" // one-line comment',
            '                    },',
            '                    "fullLicenseText": {',
            '                        "type": "array",',
            '                        "description": "The complete license text of the dependency",',
            '                        "items": {',
            '                            "type": "string"',
            '                            /* multi-line comment',
            '                            ..',
            '                            */',
            '                        },',
            '                        "array" : [',
            '                            {',
            '                                "key" : "value" /* multi-line comment',
            '                                ..',
            '                                */',
            '                            }',
            '                        ]',
            '                    },',
            '                    // one-line comment',
            '                    "prependLicenseText": {',
            '                        "type": "array", /* multi-line comment',
            '                        ..',
            '                        */',
            '                        "description": "A piece of text to prepend to the auto-detected license text of the dependency",',
            '                        /* multi-line comment',
            '                        ..',
            '                        */',
            '                        "items": {',
            '                            "type": "string"',
            '                        }',
            '                    }',
            '                }',
            '            },',
            '            {',
            '                "type": "object",',
            '                "required": [ // one-line comment',
            '                     "name",',
            '                    // one-line comment',
            '                    "fullLicenseText"',
            '                ],',
            '                "properties": {',
            '                    /* multi-line comment',
            '                    ..',
            '                    */',
            '                    "name": {',
            '                        "type": "string",',
            '                        "description": "The name of the dependency"',
            '                    },',
            '                    "fullLicenseText": {',
            '                        "type": "array",',
            '                        "description": "The complete license text of the dependency",',
            '                        "items": {',
            '                            "type": "string"',
            '                        }',
            '                    },',
            '                    /* multi-line comment',
            '                    ..',
            '                    */',
            '                    "prependLicenseText": {',
            '                        "type": "array",',
            '                        "description": "A piece of text to prepend to the auto-detected license text of the dependency", /* multi-line comment',
            '                        ..',
            '                        */',
            '                        "items": {',
            '                            "type": "string"',
            '                        }',
            '                    }',
            '                }',
            '            },',
            '            {',
            '                "type": "object",',
            '                "required": [',
            '                    "name",',
            '                    /* multi-line comment',
            '                    ..',
            '                    */',
            '                    "fullLicenseTextUri"',
            '                ],',
            '                "properties": {',
            '                    "name": {',
            '                        "type": "string", /* multi-line comment',
            '                        ..',
            '                        */',
            '                         "description": "The name of the dependency"',
            '                    },',
            '                    "fullLicenseTextUri": {',
            '                        "type": "string",',
            '                        "description": "The URI to the license text of this repository",',
            '                        "format": "uri" /* multi-line comment',
            '                        ..',
            '                        */',
            '                    },',
            '                    // one-line comment',
            '                    "prependLicenseText": { // one-line comment',
            '                        "type": "array",',
            '                        "description": "A piece of text to prepend to the auto-detected license text of the dependency",',
            '                        "items": {',
            '                            "type": "string"',
            '                        }',
            '                    } /* multi-line comment',
            '                    ..',
            '                    */',
            '                }',
            '            } /* multi-line comment',
            '            ..',
            '            */',
            '        ]',
            '    } // one-line comment',
            '}',
        ].join('\n');

        const expected = [
            '{',
            '  "items": {',
            '    /* multi-line comment',
            '        ..',
            '        */',
            '    "oneOf": [ /* multi-line comment',
            '                ..',
            '                */',
            '      {',
            '        // one-line comment',
            '        "properties": { // one-line comment',
            '          "fullLicenseText": {',
            '            "array": [',
            '              {',
            '                "key": "value" /* multi-line comment',
            '                                ..',
            '                                */',
            '              }',
            '            ],',
            '            "description": "The complete license text of the dependency",',
            '            "items": {',
            '              "type": "string"',
            '              /* multi-line comment',
            '                            ..',
            '                            */',
            '            },',
            '            "type": "array"',
            '          },',
            '          "name": {',
            '            "description": "The name of the dependency", // one-line comment',
            '            "type": "string"',
            '          },',
            '          // one-line comment',
            '          "prependLicenseText": {',
            '            "description": "A piece of text to prepend to the auto-detected license text of the dependency",',
            '            /* multi-line comment',
            '                        ..',
            '                        */',
            '            "items": {',
            '              "type": "string"',
            '            },',
            '            "type": "array" /* multi-line comment',
            '                        ..',
            '                        */',
            '          }',
            '        },',
            '        "required": [ /* multi-line comment',
            '                            ..',
            '                            */',
            '          "name",',
            '          "prependLicenseText"',
            '          /* multi-line comment',
            '                    ..',
            '                    */ ,',
            '          {',
            '            "name": "some property", /* multi-line comment',
            '                        ..',
            '                        */',
            '            "value": "some value" // some value',
            '            /* multi-line comment',
            '                        ..',
            '                        */',
            '          }',
            '        ],',
            '        "type": "object"',
            '      },',
            '      {',
            '        "properties": {',
            '          "fullLicenseText": {',
            '            "description": "The complete license text of the dependency",',
            '            "items": {',
            '              "type": "string"',
            '            },',
            '            "type": "array"',
            '          },',
            '          /* multi-line comment',
            '                    ..',
            '                    */',
            '          "name": {',
            '            "description": "The name of the dependency",',
            '            "type": "string"',
            '          },',
            '          /* multi-line comment',
            '                    ..',
            '                    */',
            '          "prependLicenseText": {',
            '            "description": "A piece of text to prepend to the auto-detected license text of the dependency", /* multi-line comment',
            '                        ..',
            '                        */',
            '            "items": {',
            '              "type": "string"',
            '            },',
            '            "type": "array"',
            '          }',
            '        },',
            '        "required": [ // one-line comment',
            '          "name",',
            '          // one-line comment',
            '          "fullLicenseText"',
            '        ],',
            '        "type": "object"',
            '      },',
            '      {',
            '        "properties": {',
            '          "fullLicenseTextUri": {',
            '            "description": "The URI to the license text of this repository",',
            '            "format": "uri", /* multi-line comment',
            '                        ..',
            '                        */',
            '            "type": "string"',
            '          },',
            '          "name": {',
            '            "description": "The name of the dependency",',
            '            "type": "string" /* multi-line comment',
            '                        ..',
            '                        */',
            '          },',
            '          // one-line comment',
            '          "prependLicenseText": { // one-line comment',
            '            "description": "A piece of text to prepend to the auto-detected license text of the dependency",',
            '            "items": {',
            '              "type": "string"',
            '            },',
            '            "type": "array"',
            '          } /* multi-line comment',
            '                    ..',
            '                    */',
            '        },',
            '        "required": [',
            '          "name",',
            '          /* multi-line comment',
            '                    ..',
            '                    */',
            '          "fullLicenseTextUri"',
            '        ],',
            '        "type": "object"',
            '      } /* multi-line comment',
            '            ..',
            '            */',
            '    ]',
            '  }, // one-line comment',
            '  "type": "array"',
            '}',
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a complicated JSONC object 4', () => {
        const content = [
            '/** multi-line or block comment',
            '        ...',
            '        ...',
            '        */',
            '// one line comment',
            '{',
            '    "version": "2.0.0",',
            '    "tasks": [ // one line comment',
            '        { /** multi-line or block comment',
            '        ...',
            '        ...',
            '        */',
            '            "type": "npm" /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */,',
            '            "script": "watch-clientd",',
            '            "label": "Core - Build", /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */',
            '            "isBackground": true,',
            '            // one line comment',
            '            "presentation": {',
            '                "reveal": "never",',
            '                "group": "buildWatchers", // one line comment',
            '                "close": false',
            '            },',
            '            "problemMatcher": {',
            '                "owner": "typescript",',
            '                "applyTo": "closedDocuments",',
            '                "fileLocation": [',
            '                    /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */',
            '                    "absolute"',
            '                ],',
            '                "pattern": {',
            '                    "regexp": "Error: ([^(]+)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\): (.*)$",',
            '                    "file": 1,',
            '                    "location": 2, /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */',
            '                    "message": 3',
            '                },',
            '                // one line comment',
            '                "background": {',
            '                    "beginsPattern": "Starting compilation...",',
            '                    "endsPattern": "Finished compilation with"',
            '                }',
            '            } // one line comment',
            '        },',
            '        { /** multi-line or block comment',
            '        ...',
            '        ...',
            '        */',
            '            "type": "npm",',
            '            "script": "watch-extensionsd",',
            '            "label": "Ext - Build",',
            '            "isBackground": true,',
            '            "presentation": {',
            '                "reveal": "never",',
            '                "group": "buildWatchers",',
            '                "close": false',
            '            },',
            '            "problemMatcher": {',
            '                "owner": "typescript",',
            '                "applyTo": "closedDocuments",',
            '                "fileLocation": [ // one line comment',
            '                    "absolute"',
            '                ],',
            '                "pattern": { /** multi-line or block comment',
            '                ...',
            '                ...',
            '                */',
            '                    "regexp": "Error: ([^(]+)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\): (.*)$",',
            '                    "file": 1,',
            '                    "location": 2,',
            '                    "message": 3',
            '                },',
            '                "background": {',
            '                    "beginsPattern": "Starting compilation",',
            '                    "endsPattern": "Finished compilation"',
            '                }',
            '            }',
            '        }',
            '    ]',
            '}',
            '',
            '/** multi-line or block comment',
            '...',
            '...',
            '*/',
        ].join('\n');

        const expected = [
            '/** multi-line or block comment',
            '        ...',
            '        ...',
            '        */',
            '// one line comment',
            '{',
            '  "tasks": [ // one line comment',
            '    { /** multi-line or block comment',
            '        ...',
            '        ...',
            '        */',
            '      "isBackground": true,',
            '      "label": "Core - Build", /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */',
            '      // one line comment',
            '      "presentation": {',
            '        "close": false,',
            '        "group": "buildWatchers", // one line comment',
            '        "reveal": "never"',
            '      },',
            '      "problemMatcher": {',
            '        "applyTo": "closedDocuments",',
            '        // one line comment',
            '        "background": {',
            '          "beginsPattern": "Starting compilation...",',
            '          "endsPattern": "Finished compilation with"',
            '        },',
            '        "fileLocation": [',
            '          /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */',
            '          "absolute"',
            '        ],',
            '        "owner": "typescript",',
            '        "pattern": {',
            '          "file": 1,',
            '          "location": 2, /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */',
            '          "message": 3,',
            '          "regexp": "Error: ([^(]+)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\): (.*)$"',
            '        }',
            '      }, // one line comment',
            '      "script": "watch-clientd",',
            '      "type": "npm" /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */',
            '    },',
            '    { /** multi-line or block comment',
            '        ...',
            '        ...',
            '        */',
            '      "isBackground": true,',
            '      "label": "Ext - Build",',
            '      "presentation": {',
            '        "close": false,',
            '        "group": "buildWatchers",',
            '        "reveal": "never"',
            '      },',
            '      "problemMatcher": {',
            '        "applyTo": "closedDocuments",',
            '        "background": {',
            '          "beginsPattern": "Starting compilation",',
            '          "endsPattern": "Finished compilation"',
            '        },',
            '        "fileLocation": [ // one line comment',
            '          "absolute"',
            '        ],',
            '        "owner": "typescript",',
            '        "pattern": { /** multi-line or block comment',
            '                ...',
            '                ...',
            '                */',
            '          "file": 1,',
            '          "location": 2,',
            '          "message": 3,',
            '          "regexp": "Error: ([^(]+)\\((\\d+|\\d+,\\d+|\\d+,\\d+,\\d+,\\d+)\\): (.*)$"',
            '        }',
            '      },',
            '      "script": "watch-extensionsd",',
            '      "type": "npm"',
            '    }',
            '  ],',
            '  "version": "2.0.0"',
            '}',
            '/** multi-line or block comment',
            '...',
            '...',
            '*/',
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a complicated JSONC object 5', () => {
        const content = [
            '{ /** multi-line or block comment',
            '...',
            '...',
            '*/',
            '    "registrations": [ /** multi-line or block comment',
            '    ...',
            '    ...',
            '    */',
            '        { /** multi-line or block comment',
            '        ...',
            '        ...',
            '        */',
            '            "component": { /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */',
            '                "type": "git",',
            '                "git": {',
            '                    "name": "textmate/markdown.tmbundle" /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */,',
            '                    "repositoryUrl": /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */ "https://github.com/textmate/markdown.tmbundle",',
            '                    "commitHash": /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */ "11cf764606cb2cde54badb5d0e5a0758a8871c4b"',
            '                }',
            '            },',
            '            "licenseDetail": /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */ [ /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */',
            '                "Copyright (c) markdown.tmbundle authors",',
            '                "" /** multi-line or block comment',
            '                ...',
            '                ...',
            '                */,',
            '                "If not otherwise specified (see below), files in this repository fall under the following license:",',
            '                "" /** multi-line or block comment',
            '                ...',
            '                ...',
            '                */,',
            '                "Permission to copy, use, modify, sell and distribute this", /** multi-line or block comment',
            '                ...',
            '                ...',
            '                */',
            '                "",',
            '                "An exception is made for files in readable text which contain their own license information,",',
            '                "or files where an accompanying file exists (in the same directory) with a \"-license\" suffix added",',
            '                "to the base-name name of the original file, and an extension of txt, html, or similar. For example",',
            '                "\"tidy\" is accompanied by \"tidy-license.txt\"."',
            '            ] /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */,',
            '            "license": "TextMate Bundle License",',
            '            "version": "0.0.0"',
            '        } /** multi-line or block comment',
            '        ...',
            '        ...',
            '        */,',
            '',
            '        /** multi-line or block comment',
            '    ...',
            '    ...',
            '    */',
            '        {',
            '            "component": {',
            '                "type": "git",',
            '                "git": {',
            '                    "name": "microsoft/vscode-markdown-tm-grammar",',
            '                    "repositoryUrl": "https://github.com/microsoft/vscode-markdown-tm-grammar",',
            '                    "commitHash": "443261e8f75b2eaa8b36a2613fe7c4354208260a"',
            '                }',
            '            },',
            '            /** multi-line or block comment',
            '    ...',
            '    ...',
            '    */',
            '            "license": "MIT",',
            '            "version": "1.0.0"',
            '        }',
            '    ],',
            '    "version": 1',
            '} /** multi-line or block comment',
            '...',
            '...',
            '*/'
        ].join('\n');

        const expected = [
            '{ /** multi-line or block comment',
            '...',
            '...',
            '*/',
            '  "registrations": [ /** multi-line or block comment',
            '    ...',
            '    ...',
            '    */',
            '    { /** multi-line or block comment',
            '        ...',
            '        ...',
            '        */',
            '      "component": { /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */',
            '        "git": {',
            '          "commitHash": /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */ "11cf764606cb2cde54badb5d0e5a0758a8871c4b",',
            '          "name": "textmate/markdown.tmbundle" /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */,',
            '          "repositoryUrl": /** multi-line or block comment',
            '                    ...',
            '                    ...',
            '                    */ "https://github.com/textmate/markdown.tmbundle"',
            '        },',
            '        "type": "git"',
            '      },',
            '      "license": "TextMate Bundle License",',
            '      "licenseDetail": /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */ [ /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */',
            '        "Copyright (c) markdown.tmbundle authors",',
            '        "" /** multi-line or block comment',
            '                ...',
            '                ...',
            '                */,',
            '        "If not otherwise specified (see below), files in this repository fall under the following license:",',
            '        "" /** multi-line or block comment',
            '                ...',
            '                ...',
            '                */,',
            '        "Permission to copy, use, modify, sell and distribute this", /** multi-line or block comment',
            '                ...',
            '                ...',
            '                */',
            '        "",',
            '        "An exception is made for files in readable text which contain their own license information,",',
            '        "or files where an accompanying file exists (in the same directory) with a \"-license\" suffix added",',
            '        "to the base-name name of the original file, and an extension of txt, html, or similar. For example",',
            '        "\"tidy\" is accompanied by \"tidy-license.txt\"."',
            '      ] /** multi-line or block comment',
            '            ...',
            '            ...',
            '            */,',
            '      "version": "0.0.0"',
            '    } /** multi-line or block comment',
            '        ...',
            '        ...',
            '        */,',
            '    /** multi-line or block comment',
            '    ...',
            '    ...',
            '    */',
            '    {',
            '      "component": {',
            '        "git": {',
            '          "commitHash": "443261e8f75b2eaa8b36a2613fe7c4354208260a",',
            '          "name": "microsoft/vscode-markdown-tm-grammar",',
            '          "repositoryUrl": "https://github.com/microsoft/vscode-markdown-tm-grammar"',
            '        },',
            '        "type": "git"',
            '      },',
            '      /** multi-line or block comment',
            '    ...',
            '    ...',
            '    */',
            '      "license": "MIT",',
            '      "version": "1.0.0"',
            '    }',
            '  ],',
            '  "version": 1',
            '} /** multi-line or block comment',
            '...',
            '...',
            '*/'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });

    test('sorting a complicated JSONC object 6', () => {
        const content = [
            '{',
            '    "explorer.copyRelativePathSeparator": "/",',
            '    "files.exclude": {',
            '        "**/.git": true',
            '    },',
            '    "git.detectSubmodules": false,',
            '    // "git.mergeEditor": true,',
            '   "files.maxMemoryForLargeFilesMB": 8192,',
            '    "git.autofetch": true,',
            '    // "git.branchProtection": ["master", "main"],',
            '    "git.closeDiffOnOperation": true,',
            '    "settingsSync.ignoredSettings": ["explorer.fileNesting.patterns"],',
            '    "terminal.integrated.shellIntegration.enabled": true,',
            '    // "terminal.integrated.smoothScrolling": true,',
            '    "terminal.integrated.scrollback": 2000,',
            '    "markdown.validate.referenceLinks.enabled": "ignore",',
            '    // "http.proxy": "http://127.0.0.1:7890",',
            '    // "typescript.suggest.completeFunctionCalls": true,',
            '    // "mergeEditor.diffAlgorithm": "experimental",',
            '    // "editor.stickyScroll.enabled": true,',
            '    // "editor.stickyScroll.maxLineCount": 3,',
            '    // "editor.guides.bracketPairs": "active",',
            '    // "editor.snippets.codeActions.enabled": false,',
            '    // "files.simpleDialog.enable": true,',
            '    // "neoVueHelper.moduleDefinition.enable": true,',
            '',
            '    // editor',
            '    "explorer.autoRevealExclude": {',
            '        "**/node_modules": false',
            '    },',
            '    "editor.accessibilitySupport": "off",',
            '    "editor.codeActionsOnSave": {',
            '        "source.addMissingImports": true,',
            '        "source.fixAll.eslint": true,',
            '        "source.fixAll.stylelint": true,',
            '        "source.fixAll.markdownlint": true,',
            '        "source.organizeImports.sortImport": true',
            '    },',
            '    "editor.formatOnSave": true,',
            '    "editor.fontSize": 12,',
            '    // "editor.find.addExtraSpaceOnTop": false,',
            '    "editor.quickSuggestions": {',
            '        "strings": true,',
            '        "comments": true,',
            '        "other": true',
            '    },',
            '    "editor.smoothScrolling": true,',
            '    "editor.unicodeHighlight.allowedLocales": {',
            '        "zh-hans": true,',
            '        "zh-hant": true',
            '    },',
            '    "editor.wordWrap": "off",',
            '    "editor.semanticTokenColorCustomizations": {',
            '        "[One Dark Pro]": {',
            '            "enabled": true,',
            '            "rules": {',
            '                "variable": {',
            '                    "foreground": "#e5c07b"',
            '                },',
            '                "variable.mutable": {',
            '                    "foreground": "#e06c75",',
            '                    "underline": false',
            '                }',
            '            }',
            '        }',
            '    },',
            '',
            '    // workbench',
            '    "workbench.tree.indent": 14,',
            '',
            '    // terminal',
            '    "terminal.integrated.wordSeparators": "hi",',
            '',
            '    // language',
            '    "html.autoClosingTags": true,',
            '    // "typescript.preferences.useAliasesForRenames": false,',
            '    "typescript.tsserver.maxTsServerMemory": 8192,',
            '    "files.associations": {',
            '        "*.jsxinc": "javascript"',
            '    },',
            '    "vsicons.associations.files": [',
            '        {',
            '            "icon": "config",',
            '            "extensions": ["env"],',
            '            "format": "svg"',
            '        }',
            '    ],',
            '    "[javascript][javascriptreact][typescript][typescriptreact][vue][json][jsonc]": {',
            '        "editor.defaultFormatter": "esbenp.prettier-vscode"',
            '    },',
            '    "[html][css][less][scss][markdown][xml][yaml][svg]": {',
            '        "editor.defaultFormatter": "esbenp.prettier-vscode"',
            '    },',
            '    "json.schemas": [',
            '        // {',
            '        //     "fileMatch": ["src/manifest.json"],',
            '        //     "url": "https://json.schemastore.org/chrome-manifest.json"',
            '        // },',
            '        {',
            '            "fileMatch": ["*/turbo.json"],',
            '            "url": "https://turborepo.org/schema.json"',
            '        }',
            '    ],',
            '',
            '   // extensions',
            '   "adobeExtensionDevtools.ps.includeXMPNamespaces": [',
            '       "hammer.ps-export",',
            '        "hammerPsExport",',
            '        "GaodingPsExport"',
            '    ],',
            '   "adobeExtensionDevtools.ps.descriptorInfoInsertTimeStr": false,',
            '   "code-runner.executorMap": {',
            '       "typescript": "ts-node",',
            '        "cpp": "cd $dir && g++ $fileName -std=c++2a -Wall -o $fileNameWithoutExt && ./$fileNameWithoutExt",',
            '       "dart": "/Users/yutengjing/apps/flutter/latest/bin/dart run --enable-asserts $fullFileName",',
            '       "python": "python3 $fullFileName"',
            '   },',
            '   "code-runner.executorMapByFileExtension": {',
            '       ".scpt": "osascript $fullFileName"',
            '    },',
            '   "code-runner.showRunIconInEditorTitleMenu": false,',
            '   "colorInfo.languages": [',
            '       {',
            '            "selector": "css",',
            '            "colors": "css"',
            '       },',
            '       {',
            '           "selector": "less",',
            '            "colors": "css"',
            '       },',
            '       {',
            '           "selector": "scss",',
            '            "colors": "css"',
            '       },',
            '       {',
            '           "selector": "vue",',
            '            "colors": "css"',
            '       }',
            '   ],',
            '   "colorize.languages": ["css", "scss", "less", "xml", "svg"],',
            '   "eslint.validate": ["javascript", "javascriptreact", "typescript", "typescriptreact", "vue"],',
            '   "livePreview.portNumber": 8888,',
            '   "gitlens.codeLens.scopes": ["document"],',
            '   "gitlens.statusBar.format": "hi",',
            '   "markdownlint.config": {',
            '       "default": true,',
            '        "MD033": false,',
            '       "MD041": false,',
            '       "MD024": false',
            '   },',
            '   "markdown-preview-github-styles.colorTheme": "light",',
            '   "modifyFileWarning.includedFileGlobs": ["**/node_modules/**/*"],',
            '   "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",',
            '   "openInExternalApp.openMapper": [',
            '       {',
            '            "extensionName": ["jsxbin", "jsx"],',
            '            "apps": "Adobe Photoshop 2022"',
            '       },',
            '       {',
            '           "extensionName": "ts",',
            '            "apps": [',
            '               {',
            '                    "title": "run ts file",',
            '                    "shellCommand": "ts-node ${file}"',
            '               }',
            '           ]',
            '       },',
            '       {',
            '           "extensionName": "shared",',
            '            "apps": "MacVim"',
            '       }',
            '   ],',
            '   "path-autocomplete.extensionOnImport": true,',
            '   "path-autocomplete.excludedItems": {',
            '       "**/*.+(ts|tsx)": {',
            '            "when": "**/*.+(ts|tsx)",',
            '            "context": "import|require"',
            '       },',
            '       "**": {',
            '           "when": "**/*.+(ts|tsx|js|jsx)",',
            '            "context": "import|require",',
            '           "isDir": true',
            '       }',
            '   },',
            '   "prettier.documentSelectors": ["**/*.svg"],',
            '   "svg.preview.mode": "svg",',
            '   "stylelint.validate": [',
            '       "css",',
            '        "less",',
            '       "scss",',
            '       "html"',
            '       // "javascriptreact",',
            '       // "typescriptreact",',
            '   ],',
            '   "inlineFold.regex": "(class|className)=[]",',
            '   "template-string-converter.validLanguages": [',
            '       "vue",',
            '        "typescript",',
            '       "javascript",',
            '       "typescriptreact",',
            '       "javascriptreact"',
            '   ],',
            '   "template-string-converter.autoRemoveTemplateString": true,',
            '   "better-comments.tags": [',
            '       {',
            '            "tag": "!:",',
            '            "color": "#FF2D00",',
            '           "strikethrough": false,',
            '           "underline": false,',
            '           "backgroundColor": "transparent",',
            '           "bold": false,',
            '           "italic": false',
            '       },',
            '       {',
            '           "tag": "?:",',
            '            "color": "#3498DB",',
            '           "strikethrough": false,',
            '           "underline": false,',
            '           "backgroundColor": "transparent",',
            '           "bold": false,',
            '           "italic": false',
            '       }',
            '    ],',
            '    // https://github.com/Gruntfuggly/todo-tree/issues/255#issuecomment-574279033',
            '    "todo-tree.regex.regex": "(?:(?://|#|<!--|;|/\\*\\*?|\\*|(-|\\d+.))\\s*($TAGS))",',
            '    "todo-tree.highlights.customHighlight": {',
            '        "TODO:": {',
            '            "foreground": "#FFFFFF",',
            '            "background": "#FFBD2A",',
            '            "iconColour": "#FFBD2A"',
            '        },',
            '        "FIXME:": {',
            '            "foreground": "#FFFFFF",',
            '            "background": "#F06292",',
            '            "icon": "flame",',
            '            "iconColour": "#F06292"',
            '        },',
            '        "NOTE:": {',
            '            "foreground": "#808080",',
            '            "background": "#FFFF00",',
            '           "icon": "alert",',
            '            "iconColour": "#FFFF00"',
            '       }',
            '   },',
            '   "todo-tree.highlights.defaultHighlight": {',
            '       "gutterIcon": false,',
            '        "rulerLane": "none"',
            '    },',
            '    "todo-tree.ripgrep.ripgrep": "/usr/local/bin/rg",',
            '    "tsImportSorter.configuration.groupRules": [',
            '        [{ "builtin": true }, "^[@][^/]", {}],',
            '        [',
            '            "^@(/|$)",',
            '            "^apis?(/|$)",',
            '            "^assets(/|$)",',
            '            "^components?(/|$)",',
            '            "^pages?(/|$)",',
            '            "^slices?(/|$)",',
            '            "^store(/|$)",',
            '            "^typings?(/|$)",',
            '            "^utils(/|$)"',
            '        ],',
            '        { "flags": "named", "regex": "^[.]" },',
            '        [{ "flags": "scripts" }, { "flags": "scripts", "regex": "[.]((css)|(less)|(scss))$" }]',
            '    ],',
            '    "vsicons.associations.folders": [',
            '        {',
            '            "icon": "test",',
            '            "extensions": ["test-workspace"],',
            '            "format": "svg"',
            '        },',
            '        {',
            '            "icon": "www",',
            '            "extensions": ["web"],',
            '            "format": "svg"',
            '        }',
            '    ],',
            '    "fileAccess.position": "right",',
            '',
            '    // long config',
            '    "cSpell.dictionaries": ["myDict"],',
            '    "cSpell.ignorePaths": [',
            '        "node_modules",',
            '        "vscode-extension",',
            '        ".git/objects",',
            '        ".idea",',
            '        ".dart_tool",',
            '        "**/*.lock",',
            '        "**/*.log",',
            '        "package-lock.json",',
            '        "**/pnpm-lock.yaml"',
            '    ],',
            '    "cSpell.dictionaryDefinitions": [',
            '        {',
            '            "name": "myDict",',
            '            "path": "/Users/yutengjing/.my-spell-check-dict.txt"',
            '        }',
            '    ],',
            '    "cSpell.userWords": ["argb"],',
            '',
            '    // file nesting',
            '    "explorer.fileNesting.enabled": true,',
            '    "editor.tokenColorCustomizations": {',
            '        "textMateRules": []',
            '    },',
            '    "gitlens.advanced.messages": {',
            '        "suppressDebugLoggingWarning": true',
            '    },',
            '    "workbench.layoutControl.enabled": false,',
            '    "yaml.maxItemsComputed": 10000,',
            '    "explorer.fileNesting.patterns": {',
            '        "//": "Last update at 2023/2/23 03:44:47",',
            '        "*.c": "$(capture).h"',
            '    },',
            '    "window.zoomLevel": 1',
            '}',
        ].join('\n');

        const expected = [
            '{',
            '  "[html][css][less][scss][markdown][xml][yaml][svg]": {',
            '    "editor.defaultFormatter": "esbenp.prettier-vscode"',
            '  },',
            '  "[javascript][javascriptreact][typescript][typescriptreact][vue][json][jsonc]": {',
            '    "editor.defaultFormatter": "esbenp.prettier-vscode"',
            '  },',
            '  "adobeExtensionDevtools.ps.descriptorInfoInsertTimeStr": false,',
            '  // extensions',
            '  "adobeExtensionDevtools.ps.includeXMPNamespaces": [',
            '    "hammer.ps-export",',
            '    "hammerPsExport",',
            '    "GaodingPsExport"',
            '  ],',
            '  "better-comments.tags": [',
            '    {',
            '      "backgroundColor": "transparent",',
            '      "bold": false,',
            '      "color": "#FF2D00",',
            '      "italic": false,',
            '      "strikethrough": false,',
            '      "tag": "!:",',
            '      "underline": false',
            '    },',
            '    {',
            '      "backgroundColor": "transparent",',
            '      "bold": false,',
            '      "color": "#3498DB",',
            '      "italic": false,',
            '      "strikethrough": false,',
            '      "tag": "?:",',
            '      "underline": false',
            '    }',
            '  ],',
            '  "code-runner.executorMap": {',
            '    "cpp": "cd $dir && g++ $fileName -std=c++2a -Wall -o $fileNameWithoutExt && ./$fileNameWithoutExt",',
            '    "dart": "/Users/yutengjing/apps/flutter/latest/bin/dart run --enable-asserts $fullFileName",',
            '    "python": "python3 $fullFileName",',
            '    "typescript": "ts-node"',
            '  },',
            '  "code-runner.executorMapByFileExtension": {',
            '    ".scpt": "osascript $fullFileName"',
            '  },',
            '  "code-runner.showRunIconInEditorTitleMenu": false,',
            '  "colorInfo.languages": [',
            '    {',
            '      "colors": "css",',
            '      "selector": "css"',
            '    },',
            '    {',
            '      "colors": "css",',
            '      "selector": "less"',
            '    },',
            '    {',
            '      "colors": "css",',
            '      "selector": "scss"',
            '    },',
            '    {',
            '      "colors": "css",',
            '      "selector": "vue"',
            '    }',
            '  ],',
            '  "colorize.languages": [',
            '    "css",',
            '    "scss",',
            '    "less",',
            '    "xml",',
            '    "svg"',
            '  ],',
            '  // long config',
            '  "cSpell.dictionaries": [',
            '    "myDict"',
            '  ],',
            '  "cSpell.dictionaryDefinitions": [',
            '    {',
            '      "name": "myDict",',
            '      "path": "/Users/yutengjing/.my-spell-check-dict.txt"',
            '    }',
            '  ],',
            '  "cSpell.ignorePaths": [',
            '    "node_modules",',
            '    "vscode-extension",',
            '    ".git/objects",',
            '    ".idea",',
            '    ".dart_tool",',
            '    "**/*.lock",',
            '    "**/*.log",',
            '    "package-lock.json",',
            '    "**/pnpm-lock.yaml"',
            '  ],',
            '  "cSpell.userWords": [',
            '    "argb"',
            '  ],',
            '  "editor.accessibilitySupport": "off",',
            '  "editor.codeActionsOnSave": {',
            '    "source.addMissingImports": true,',
            '    "source.fixAll.eslint": true,',
            '    "source.fixAll.markdownlint": true,',
            '    "source.fixAll.stylelint": true,',
            '    "source.organizeImports.sortImport": true',
            '  },',
            '  "editor.fontSize": 12,',
            '  "editor.formatOnSave": true,',
            '  // "editor.find.addExtraSpaceOnTop": false,',
            '  "editor.quickSuggestions": {',
            '    "comments": true,',
            '    "other": true,',
            '    "strings": true',
            '  },',
            '  "editor.semanticTokenColorCustomizations": {',
            '    "[One Dark Pro]": {',
            '      "enabled": true,',
            '      "rules": {',
            '        "variable": {',
            '          "foreground": "#e5c07b"',
            '        },',
            '        "variable.mutable": {',
            '          "foreground": "#e06c75",',
            '          "underline": false',
            '        }',
            '      }',
            '    }',
            '  },',
            '  "editor.smoothScrolling": true,',
            '  "editor.tokenColorCustomizations": {',
            '    "textMateRules": []',
            '  },',
            '  "editor.unicodeHighlight.allowedLocales": {',
            '    "zh-hans": true,',
            '    "zh-hant": true',
            '  },',
            '  "editor.wordWrap": "off",',
            '  "eslint.validate": [',
            '    "javascript",',
            '    "javascriptreact",',
            '    "typescript",',
            '    "typescriptreact",',
            '    "vue"',
            '  ],',
            '  // "http.proxy": "http://127.0.0.1:7890",',
            '  // "typescript.suggest.completeFunctionCalls": true,',
            '  // "mergeEditor.diffAlgorithm": "experimental",',
            '  // "editor.stickyScroll.enabled": true,',
            '  // "editor.stickyScroll.maxLineCount": 3,',
            '  // "editor.guides.bracketPairs": "active",',
            '  // "editor.snippets.codeActions.enabled": false,',
            '  // "files.simpleDialog.enable": true,',
            '  // "neoVueHelper.moduleDefinition.enable": true,',
            '  // editor',
            '  "explorer.autoRevealExclude": {',
            '    "**/node_modules": false',
            '  },',
            '  "explorer.copyRelativePathSeparator": "/",',
            '  // file nesting',
            '  "explorer.fileNesting.enabled": true,',
            '  "explorer.fileNesting.patterns": {',
            '    "*.c": "$(capture).h",',
            '    "//": "Last update at 2023/2/23 03:44:47"',
            '  },',
            '  "fileAccess.position": "right",',
            '  "files.associations": {',
            '    "*.jsxinc": "javascript"',
            '  },',
            '  "files.exclude": {',
            '    "**/.git": true',
            '  },',
            '  // "git.mergeEditor": true,',
            '  "files.maxMemoryForLargeFilesMB": 8192,',
            '  "git.autofetch": true,',
            '  // "git.branchProtection": ["master", "main"],',
            '  "git.closeDiffOnOperation": true,',
            '  "git.detectSubmodules": false,',
            '  "gitlens.advanced.messages": {',
            '    "suppressDebugLoggingWarning": true',
            '  },',
            '  "gitlens.codeLens.scopes": [',
            '    "document"',
            '  ],',
            '  "gitlens.statusBar.format": "hi",',
            '  // language',
            '  "html.autoClosingTags": true,',
            '  "inlineFold.regex": "(class|className)=[]",',
            '  "json.schemas": [',
            '    // {',
            '    //     "fileMatch": ["src/manifest.json"],',
            '    //     "url": "https://json.schemastore.org/chrome-manifest.json"',
            '    // },',
            '    {',
            '      "fileMatch": [',
            '        "*/turbo.json"',
            '      ],',
            '      "url": "https://turborepo.org/schema.json"',
            '    }',
            '  ],',
            '  "livePreview.portNumber": 8888,',
            '  "markdown-preview-github-styles.colorTheme": "light",',
            '  "markdown.validate.referenceLinks.enabled": "ignore",',
            '  "markdownlint.config": {',
            '    "default": true,',
            '    "MD024": false',
            '    "MD033": false,',
            '    "MD041": false,',
            '  },',
            '  "modifyFileWarning.includedFileGlobs": [',
            '    "**/node_modules/**/*"',
            '  ],',
            '  "openInExternalApp.openMapper": [',
            '    {',
            '      "apps": "Adobe Photoshop 2022",',
            '      "extensionName": [',
            '        "jsxbin",',
            '        "jsx"',
            '      ]',
            '    },',
            '    {',
            '      "apps": [',
            '        {',
            '          "shellCommand": "ts-node ${file}",',
            '          "title": "run ts file"',
            '        }',
            '      ],',
            '      "extensionName": "ts"',
            '    },',
            '    {',
            '      "apps": "MacVim",',
            '      "extensionName": "shared"',
            '    }',
            '  ],',
            '  "path-autocomplete.excludedItems": {',
            '    "**": {',
            '      "context": "import|require",',
            '      "isDir": true,',
            '      "when": "**/*.+(ts|tsx|js|jsx)"',
            '    },',
            '    "**/*.+(ts|tsx)": {',
            '      "context": "import|require",',
            '      "when": "**/*.+(ts|tsx)"',
            '    }',
            '  },',
            '  "path-autocomplete.extensionOnImport": true,',
            '  "prettier.documentSelectors": [',
            '    "**/*.svg"',
            '  ],',
            '  "settingsSync.ignoredSettings": [',
            '    "explorer.fileNesting.patterns"',
            '  ],',
            '  "stylelint.validate": [',
            '    "css",',
            '    "less",',
            '    "scss",',
            '    "html"',
            '    // "javascriptreact",',
            '    // "typescriptreact",',
            '  ],',
            '  "svg.preview.mode": "svg",',
            '  "template-string-converter.autoRemoveTemplateString": true,',
            '  "template-string-converter.validLanguages": [',
            '    "vue",',
            '    "typescript",',
            '    "javascript",',
            '    "typescriptreact",',
            '    "javascriptreact"',
            '  ],',
            '  // "terminal.integrated.smoothScrolling": true,',
            '  "terminal.integrated.scrollback": 2000,',
            '  "terminal.integrated.shellIntegration.enabled": true,',
            '  // terminal',
            '  "terminal.integrated.wordSeparators": "hi",',
            '  "todo-tree.highlights.customHighlight": {',
            '    "FIXME:": {',
            '      "background": "#F06292",',
            '      "foreground": "#FFFFFF",',
            '      "icon": "flame",',
            '      "iconColour": "#F06292"',
            '    },',
            '    "NOTE:": {',
            '      "background": "#FFFF00",',
            '      "foreground": "#808080",',
            '      "icon": "alert",',
            '      "iconColour": "#FFFF00"',
            '    },',
            '    "TODO:": {',
            '      "background": "#FFBD2A",',
            '      "foreground": "#FFFFFF",',
            '      "iconColour": "#FFBD2A"',
            '    }',
            '  },',
            '  "todo-tree.highlights.defaultHighlight": {',
            '    "gutterIcon": false,',
            '    "rulerLane": "none"',
            '  },',
            '  // https://github.com/Gruntfuggly/todo-tree/issues/255#issuecomment-574279033',
            '  "todo-tree.regex.regex": "(?:(?://|#|<!--|;|/\\*\\*?|\\*|(-|\\d+.))\\s*($TAGS))",',
            '  "todo-tree.ripgrep.ripgrep": "/usr/local/bin/rg",',
            '  "tsImportSorter.configuration.groupRules": [',
            '    [',
            '      {',
            '        "builtin": true',
            '      },',
            '      "^[@][^/]",',
            '      {}',
            '    ],',
            '    [',
            '      "^@(/|$)",',
            '      "^apis?(/|$)",',
            '      "^assets(/|$)",',
            '      "^components?(/|$)",',
            '      "^pages?(/|$)",',
            '      "^slices?(/|$)",',
            '      "^store(/|$)",',
            '      "^typings?(/|$)",',
            '      "^utils(/|$)"',
            '    ],',
            '    {',
            '      "flags": "named",',
            '      "regex": "^[.]"',
            '    },',
            '    [',
            '      {',
            '        "flags": "scripts"',
            '      },',
            '      {',
            '        "flags": "scripts",',
            '        "regex": "[.]((css)|(less)|(scss))$"',
            '      }',
            '    ]',
            '  ],',
            '  // "typescript.preferences.useAliasesForRenames": false,',
            '  "typescript.tsserver.maxTsServerMemory": 8192,',
            '  "vsicons.associations.files": [',
            '    {',
            '      "extensions": [',
            '        "env"',
            '      ],',
            '      "format": "svg",',
            '      "icon": "config"',
            '    }',
            '  ],',
            '  "vsicons.associations.folders": [',
            '    {',
            '      "extensions": [',
            '        "test-workspace"',
            '      ],',
            '      "format": "svg",',
            '      "icon": "test"',
            '    },',
            '    {',
            '      "extensions": [',
            '        "web"',
            '      ],',
            '      "format": "svg",',
            '      "icon": "www"',
            '    }',
            '  ],',
            '  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",',
            '  "window.zoomLevel": 1,',
            '  "workbench.layoutControl.enabled": false,',
            '  // workbench',
            '  "workbench.tree.indent": 14,',
            '  "yaml.maxItemsComputed": 10000',
            '}'
        ].join('\n');

        testSort(content, expected, formattingOptions);
    });
});
